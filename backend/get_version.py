#!/usr/bin/env python

import sys
import pkg_resources
from typing import Dict, List

def check_virtual_env() -> None:
    """
    Checks if the script is running inside a virtual environment and warns the user if not.
    """
    # sys.prefix is the site-specific directory prefix, e.g., /path/to/venv
    # sys.base_prefix is the prefix of the Python installation, e.g., /usr
    # In a virtual environment, these will be different.
    if sys.prefix == sys.base_prefix:
        print("\033[93mWarning:\033[0m You are not in a Python virtual environment.")
        print("This script will list all packages from your global Python installation.")
        try:
            proceed = input("Do you want to continue? (y/n): ").lower()
            if proceed != 'y':
                print("Operation cancelled.")
                sys.exit()
        except KeyboardInterrupt:
            print("\nOperation cancelled.")
            sys.exit()


def get_dependencies() -> Dict[str, str]:
    """
    Retrieves all installed packages and their versions in the current environment.

    Returns:
        A dictionary mapping package names to their version strings.
    """
    # pkg_resources.working_set provides an iterable of all available packages.
    installed_packages = {pkg.key: pkg.version for pkg in pkg_resources.working_set}
    return installed_packages


def save_to_requirements(dependencies: Dict[str, str], filename: str = "requirements.txt") -> None:
    """
    Saves the list of dependencies to a file in pip's requirements format.

    Args:
        dependencies: A dictionary of packages and their versions.
        filename: The name of the file to save the dependencies to.
    """
    if not dependencies:
        print("No dependencies found to save.")
        return

    # Sort packages alphabetically for consistency
    sorted_packages = sorted(dependencies.items())

    try:
        with open(filename, "w") as f:
            f.write("# This file was generated by a script.\n")
            f.write("# It contains a list of all packages installed in the environment.\n\n")
            for package, version in sorted_packages:
                f.write(f"{package}=={version}\n")
        print(f"\n\033[92mSuccess!\033[0m Dependencies have been saved to '{filename}'.")
        print(f"You can now reinstall these packages using: pip install -r {filename}")
    except IOError as e:
        print(f"\033[91mError:\033[0m Failed to write to file '{filename}'. Reason: {e}")


if __name__ == "__main__":
    print("--- Dependency Extractor ---")
    # First, check if we are in a virtual environment.
    check_virtual_env()

    # Get the list of installed packages.
    print("\nGathering installed packages...")
    deps = get_dependencies()

    # Save the list to requirements.txt.
    save_to_requirements(deps)
